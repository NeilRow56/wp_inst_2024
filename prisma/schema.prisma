// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
 id              String @id @default(auto()) @map("_id") @db.ObjectId
 name            String?
 bio             String?
 website         String?
 gender          String?
 email           String   @unique 
 imageUrl        String? 
 colorScheme     String        @default("theme-orange")
 Subscription    Subscription []
 Notes           Note[]
 createdAt       DateTime @default(now())
 updatedAt       DateTime @updatedAt
 posts         Post[]
 saved         SavedPost[]
 likes         Like[]
 comments      Comment[]
 followers    Follower[]   
 
 

   
 
 
}


model Subscription {
  stripeSubscriptionId String @id @default(auto()) @map("_id") @db.ObjectId
  interval            String
  status               String
  planId               String
  currentPeriodStart   Int
  currentPeriodEnd     Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId               String   @db.ObjectId
}

model Note {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}



model Post {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    caption   String?
    fileUrl   String      @unique
    likes     Like[]
    savedBy   SavedPost[]
    comments  Comment[]
    followers Follower[]
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId

    @@index([userId])
}

model SavedPost {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String @db.ObjectId
    userId String @db.ObjectId

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([postId, userId])
    @@index([userId])
}

model Like {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String @db.ObjectId
    userId String @db.ObjectId

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([postId, userId])
    @@index([userId])
}

model Comment {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    body      String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String @db.ObjectId
    userId String @db.ObjectId

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([postId])
    @@index([userId])
}

model Follower {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String @db.ObjectId
  postId             String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}